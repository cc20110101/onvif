/* soapProvisioningBindingProxy.cpp
   Generated by gSOAP 2.8.45 for onvif.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapProvisioningBindingProxy.h"

ProvisioningBindingProxy::ProvisioningBindingProxy()
{	this->soap = soap_new();
	this->soap_own = true;
	ProvisioningBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

ProvisioningBindingProxy::ProvisioningBindingProxy(const ProvisioningBindingProxy& rhs)
{	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
}

ProvisioningBindingProxy::ProvisioningBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->soap_own = false;
	ProvisioningBindingProxy_init(_soap->imode, _soap->omode);
}

ProvisioningBindingProxy::ProvisioningBindingProxy(const char *endpoint)
{	this->soap = soap_new();
	this->soap_own = true;
	ProvisioningBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

ProvisioningBindingProxy::ProvisioningBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ProvisioningBindingProxy_init(iomode, iomode);
}

ProvisioningBindingProxy::ProvisioningBindingProxy(const char *endpoint, soap_mode iomode)
{	this->soap = soap_new();
	this->soap_own = true;
	ProvisioningBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

ProvisioningBindingProxy::ProvisioningBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->soap_own = true;
	ProvisioningBindingProxy_init(imode, omode);
}

ProvisioningBindingProxy::~ProvisioningBindingProxy()
{	if (this->soap_own)
		soap_free(this->soap);
}

void ProvisioningBindingProxy::ProvisioningBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"wsa", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL, NULL},
        {"wsdd", "http://schemas.xmlsoap.org/ws/2005/04/discovery", NULL, NULL},
        {"chan", "http://schemas.microsoft.com/ws/2005/02/duplex", NULL, NULL},
        {"wsa5", "http://www.w3.org/2005/08/addressing", "http://schemas.xmlsoap.org/ws/2004/08/addressing", NULL},
        {"c14n", "http://www.w3.org/2001/10/xml-exc-c14n#", NULL, NULL},
        {"ds", "http://www.w3.org/2000/09/xmldsig#", NULL, NULL},
        {"saml1", "urn:oasis:names:tc:SAML:1.0:assertion", NULL, NULL},
        {"saml2", "urn:oasis:names:tc:SAML:2.0:assertion", NULL, NULL},
        {"wsu", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd", NULL, NULL},
        {"xenc", "http://www.w3.org/2001/04/xmlenc#", NULL, NULL},
        {"wsc", "http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512", NULL, NULL},
        {"wsse", "http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd", "http://docs.oasis-open.org/wss/oasis-wss-wssecurity-secext-1.1.xsd", NULL},
        {"ns1", "http://www.onvif.org/ver20/analytics/humanface", NULL, NULL},
        {"ns2", "http://www.onvif.org/ver20/analytics/humanbody", NULL, NULL},
        {"ns5", "http://www.onvif.org/ver10/pacs", NULL, NULL},
        {"xmime", "http://tempuri.org/xmime.xsd", NULL, NULL},
        {"xop", "http://www.w3.org/2004/08/xop/include", NULL, NULL},
        {"tt", "http://www.onvif.org/ver10/schema", NULL, NULL},
        {"wsrfbf", "http://docs.oasis-open.org/wsrf/bf-2", NULL, NULL},
        {"wstop", "http://docs.oasis-open.org/wsn/t-1", NULL, NULL},
        {"wsrfr", "http://docs.oasis-open.org/wsrf/r-2", NULL, NULL},
        {"ns10", "http://www.onvif.org/ver10/schedule/wsdl", NULL, NULL},
        {"ns11", "http://www.onvif.org/ver10/thermal/wsdl", NULL, NULL},
        {"ns12", "http://www.onvif.org/ver10/uplink/wsdl", NULL, NULL},
        {"ns13", "http://www.onvif.org/ver10/accesscontrol/wsdl", NULL, NULL},
        {"ns14", "http://www.onvif.org/ver10/accessrules/wsdl", NULL, NULL},
        {"ns3", "http://www.onvif.org/ver10/actionengine/wsdl", NULL, NULL},
        {"ns4", "http://www.onvif.org/ver10/authenticationbehavior/wsdl", NULL, NULL},
        {"ns6", "http://www.onvif.org/ver10/credential/wsdl", NULL, NULL},
        {"ns7", "http://www.onvif.org/ver10/doorcontrol/wsdl", NULL, NULL},
        {"ns8", "http://www.onvif.org/ver20/media/wsdl", NULL, NULL},
        {"ns9", "http://www.onvif.org/ver10/provisioning/wsdl", NULL, NULL},
        {"tan", "http://www.onvif.org/ver20/analytics/wsdl", NULL, NULL},
        {"tas", "http://www.onvif.org/ver10/advancedsecurity/wsdl", NULL, NULL},
        {"tdn", "http://www.onvif.org/ver10/network/wsdl", NULL, NULL},
        {"tds", "http://www.onvif.org/ver10/device/wsdl", NULL, NULL},
        {"tev", "http://www.onvif.org/ver10/events/wsdl", NULL, NULL},
        {"wsnt", "http://docs.oasis-open.org/wsn/b-2", NULL, NULL},
        {"timg", "http://www.onvif.org/ver20/imaging/wsdl", NULL, NULL},
        {"tls", "http://www.onvif.org/ver10/display/wsdl", NULL, NULL},
        {"tmd", "http://www.onvif.org/ver10/deviceIO/wsdl", NULL, NULL},
        {"tptz", "http://www.onvif.org/ver20/ptz/wsdl", NULL, NULL},
        {"trc", "http://www.onvif.org/ver10/recording/wsdl", NULL, NULL},
        {"trp", "http://www.onvif.org/ver10/replay/wsdl", NULL, NULL},
        {"trt", "http://www.onvif.org/ver10/media/wsdl", NULL, NULL},
        {"trv", "http://www.onvif.org/ver10/receiver/wsdl", NULL, NULL},
        {"tse", "http://www.onvif.org/ver10/search/wsdl", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this->soap, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
ProvisioningBindingProxy *ProvisioningBindingProxy::copy()
{	ProvisioningBindingProxy *dup = SOAP_NEW_COPY(ProvisioningBindingProxy);
	if (dup)
		soap_copy_context(dup->soap, this->soap);
	return dup;
}
#endif

ProvisioningBindingProxy& ProvisioningBindingProxy::operator=(const ProvisioningBindingProxy& rhs)
{	if (this->soap_own)
		soap_free(this->soap);
	this->soap = rhs.soap;
	this->soap_own = false;
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void ProvisioningBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void ProvisioningBindingProxy::reset()
{	this->destroy();
	soap_done(this->soap);
	soap_initialize(this->soap);
	ProvisioningBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void ProvisioningBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

void ProvisioningBindingProxy::soap_header(char *wsa__MessageID, struct wsa__Relationship *wsa__RelatesTo, struct wsa__EndpointReferenceType *wsa__From, struct wsa__EndpointReferenceType *wsa__ReplyTo, struct wsa__EndpointReferenceType *wsa__FaultTo, char *wsa__To, char *wsa__Action, struct wsdd__AppSequenceType *wsdd__AppSequence, char *wsa5__MessageID, struct wsa5__RelatesToType *wsa5__RelatesTo, struct wsa5__EndpointReferenceType *wsa5__From, struct wsa5__EndpointReferenceType *wsa5__ReplyTo, struct wsa5__EndpointReferenceType *wsa5__FaultTo, char *wsa5__To, char *wsa5__Action, struct chan__ChannelInstanceType *chan__ChannelInstance, struct _wsse__Security *wsse__Security)
{	::soap_header(this->soap);
	this->soap->header->wsa__MessageID = wsa__MessageID;
	this->soap->header->wsa__RelatesTo = wsa__RelatesTo;
	this->soap->header->wsa__From = wsa__From;
	this->soap->header->wsa__ReplyTo = wsa__ReplyTo;
	this->soap->header->wsa__FaultTo = wsa__FaultTo;
	this->soap->header->wsa__To = wsa__To;
	this->soap->header->wsa__Action = wsa__Action;
	this->soap->header->wsdd__AppSequence = wsdd__AppSequence;
	this->soap->header->wsa5__MessageID = wsa5__MessageID;
	this->soap->header->wsa5__RelatesTo = wsa5__RelatesTo;
	this->soap->header->wsa5__From = wsa5__From;
	this->soap->header->wsa5__ReplyTo = wsa5__ReplyTo;
	this->soap->header->wsa5__FaultTo = wsa5__FaultTo;
	this->soap->header->wsa5__To = wsa5__To;
	this->soap->header->wsa5__Action = wsa5__Action;
	this->soap->header->chan__ChannelInstance = chan__ChannelInstance;
	this->soap->header->wsse__Security = wsse__Security;
}

::SOAP_ENV__Header *ProvisioningBindingProxy::soap_header()
{	return this->soap->header;
}

::SOAP_ENV__Fault *ProvisioningBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *ProvisioningBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *ProvisioningBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int ProvisioningBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int ProvisioningBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void ProvisioningBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void ProvisioningBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *ProvisioningBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int ProvisioningBindingProxy::GetServiceCapabilities(const char *endpoint, const char *soap_action, _ns9__GetServiceCapabilities *ns9__GetServiceCapabilities, _ns9__GetServiceCapabilitiesResponse &ns9__GetServiceCapabilitiesResponse)
{	struct soap *soap = this->soap;
	struct __ns9__GetServiceCapabilities soap_tmp___ns9__GetServiceCapabilities;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/provisioning/wsdl/GetServiceCapabilities";
	soap_tmp___ns9__GetServiceCapabilities.ns9__GetServiceCapabilities = ns9__GetServiceCapabilities;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns9__GetServiceCapabilities(soap, &soap_tmp___ns9__GetServiceCapabilities);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns9__GetServiceCapabilities(soap, &soap_tmp___ns9__GetServiceCapabilities, "-ns9:GetServiceCapabilities", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns9__GetServiceCapabilities(soap, &soap_tmp___ns9__GetServiceCapabilities, "-ns9:GetServiceCapabilities", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns9__GetServiceCapabilitiesResponse*>(&ns9__GetServiceCapabilitiesResponse)) // NULL ref?
		return soap_closesock(soap);
	ns9__GetServiceCapabilitiesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns9__GetServiceCapabilitiesResponse.soap_get(soap, "ns9:GetServiceCapabilitiesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ProvisioningBindingProxy::PanMove(const char *endpoint, const char *soap_action, _ns9__PanMove *ns9__PanMove, _ns9__PanMoveResponse &ns9__PanMoveResponse)
{	struct soap *soap = this->soap;
	struct __ns9__PanMove soap_tmp___ns9__PanMove;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/provisioning/wsdl/PanMove";
	soap_tmp___ns9__PanMove.ns9__PanMove = ns9__PanMove;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns9__PanMove(soap, &soap_tmp___ns9__PanMove);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns9__PanMove(soap, &soap_tmp___ns9__PanMove, "-ns9:PanMove", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns9__PanMove(soap, &soap_tmp___ns9__PanMove, "-ns9:PanMove", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns9__PanMoveResponse*>(&ns9__PanMoveResponse)) // NULL ref?
		return soap_closesock(soap);
	ns9__PanMoveResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns9__PanMoveResponse.soap_get(soap, "ns9:PanMoveResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ProvisioningBindingProxy::TiltMove(const char *endpoint, const char *soap_action, _ns9__TiltMove *ns9__TiltMove, _ns9__TiltMoveResponse &ns9__TiltMoveResponse)
{	struct soap *soap = this->soap;
	struct __ns9__TiltMove soap_tmp___ns9__TiltMove;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/provisioning/wsdl/TiltMove";
	soap_tmp___ns9__TiltMove.ns9__TiltMove = ns9__TiltMove;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns9__TiltMove(soap, &soap_tmp___ns9__TiltMove);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns9__TiltMove(soap, &soap_tmp___ns9__TiltMove, "-ns9:TiltMove", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns9__TiltMove(soap, &soap_tmp___ns9__TiltMove, "-ns9:TiltMove", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns9__TiltMoveResponse*>(&ns9__TiltMoveResponse)) // NULL ref?
		return soap_closesock(soap);
	ns9__TiltMoveResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns9__TiltMoveResponse.soap_get(soap, "ns9:TiltMoveResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ProvisioningBindingProxy::ZoomMove(const char *endpoint, const char *soap_action, _ns9__ZoomMove *ns9__ZoomMove, _ns9__ZoomMoveResponse &ns9__ZoomMoveResponse)
{	struct soap *soap = this->soap;
	struct __ns9__ZoomMove soap_tmp___ns9__ZoomMove;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/provisioning/wsdl/ZoomMove";
	soap_tmp___ns9__ZoomMove.ns9__ZoomMove = ns9__ZoomMove;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns9__ZoomMove(soap, &soap_tmp___ns9__ZoomMove);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns9__ZoomMove(soap, &soap_tmp___ns9__ZoomMove, "-ns9:ZoomMove", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns9__ZoomMove(soap, &soap_tmp___ns9__ZoomMove, "-ns9:ZoomMove", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns9__ZoomMoveResponse*>(&ns9__ZoomMoveResponse)) // NULL ref?
		return soap_closesock(soap);
	ns9__ZoomMoveResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns9__ZoomMoveResponse.soap_get(soap, "ns9:ZoomMoveResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ProvisioningBindingProxy::RollMove(const char *endpoint, const char *soap_action, _ns9__RollMove *ns9__RollMove, _ns9__RollMoveResponse &ns9__RollMoveResponse)
{	struct soap *soap = this->soap;
	struct __ns9__RollMove soap_tmp___ns9__RollMove;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/provisioning/wsdl/RollMove";
	soap_tmp___ns9__RollMove.ns9__RollMove = ns9__RollMove;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns9__RollMove(soap, &soap_tmp___ns9__RollMove);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns9__RollMove(soap, &soap_tmp___ns9__RollMove, "-ns9:RollMove", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns9__RollMove(soap, &soap_tmp___ns9__RollMove, "-ns9:RollMove", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns9__RollMoveResponse*>(&ns9__RollMoveResponse)) // NULL ref?
		return soap_closesock(soap);
	ns9__RollMoveResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns9__RollMoveResponse.soap_get(soap, "ns9:RollMoveResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ProvisioningBindingProxy::FocusMove(const char *endpoint, const char *soap_action, _ns9__FocusMove *ns9__FocusMove, _ns9__FocusMoveResponse &ns9__FocusMoveResponse)
{	struct soap *soap = this->soap;
	struct __ns9__FocusMove soap_tmp___ns9__FocusMove;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/provisioning/wsdl/FocusMove";
	soap_tmp___ns9__FocusMove.ns9__FocusMove = ns9__FocusMove;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns9__FocusMove(soap, &soap_tmp___ns9__FocusMove);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns9__FocusMove(soap, &soap_tmp___ns9__FocusMove, "-ns9:FocusMove", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns9__FocusMove(soap, &soap_tmp___ns9__FocusMove, "-ns9:FocusMove", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns9__FocusMoveResponse*>(&ns9__FocusMoveResponse)) // NULL ref?
		return soap_closesock(soap);
	ns9__FocusMoveResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns9__FocusMoveResponse.soap_get(soap, "ns9:FocusMoveResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ProvisioningBindingProxy::Stop(const char *endpoint, const char *soap_action, _ns9__Stop *ns9__Stop, _ns9__StopResponse &ns9__StopResponse)
{	struct soap *soap = this->soap;
	struct __ns9__Stop soap_tmp___ns9__Stop;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/provisioning/wsdl/Stop";
	soap_tmp___ns9__Stop.ns9__Stop = ns9__Stop;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns9__Stop(soap, &soap_tmp___ns9__Stop);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns9__Stop(soap, &soap_tmp___ns9__Stop, "-ns9:Stop", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns9__Stop(soap, &soap_tmp___ns9__Stop, "-ns9:Stop", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns9__StopResponse*>(&ns9__StopResponse)) // NULL ref?
		return soap_closesock(soap);
	ns9__StopResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns9__StopResponse.soap_get(soap, "ns9:StopResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int ProvisioningBindingProxy::GetUsage(const char *endpoint, const char *soap_action, _ns9__GetUsage *ns9__GetUsage, _ns9__GetUsageResponse &ns9__GetUsageResponse)
{	struct soap *soap = this->soap;
	struct __ns9__GetUsage soap_tmp___ns9__GetUsage;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_action == NULL)
		soap_action = "http://www.onvif.org/ver10/provisioning/wsdl/Usage";
	soap_tmp___ns9__GetUsage.ns9__GetUsage = ns9__GetUsage;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___ns9__GetUsage(soap, &soap_tmp___ns9__GetUsage);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns9__GetUsage(soap, &soap_tmp___ns9__GetUsage, "-ns9:GetUsage", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns9__GetUsage(soap, &soap_tmp___ns9__GetUsage, "-ns9:GetUsage", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns9__GetUsageResponse*>(&ns9__GetUsageResponse)) // NULL ref?
		return soap_closesock(soap);
	ns9__GetUsageResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns9__GetUsageResponse.soap_get(soap, "ns9:GetUsageResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
